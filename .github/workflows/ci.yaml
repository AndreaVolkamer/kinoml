name: CI

on:
  push:
    branches:
      - "master"
      - "maintenance/.+"
  pull_request:
    branches:
      - "master"
      - "maintenance/.+"
  schedule:
    # Run a cron job once daily
    - cron: "0 0 * * *"

jobs:
  test:
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - os: ubuntu-latest
            python-version: "3.6"

          - os: ubuntu-latest
            python-version: "3.7"

          - os: ubuntu-latest
            python-version: "3.8"

          - os: ubuntu-latest
            python-version: "3.9"

          - os: macOS-latest
            python-version: "3.6"

    env:
      OE_LICENSE: ${{ github.workspace }}/oe_license.txt
      MODELLER_LICENSE: ${{ secrets.MODELLER_LICENSE }}

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.cfg.python-version }}
          activate-environment: test
          channel-priority: true
          environment-file: devtools/conda-envs/test_env.yaml
          auto-activate-base: false

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Environment Information
        shell: bash -l {0}
        run: |
          conda info --all
          conda list

      - name: Decrypt and check OE license
        shell: bash -l {0}
        env:
          OE_LICENSE_TEXT: ${{ secrets.OE_LICENSE }}
        run: |
          echo "${OE_LICENSE_TEXT}" > ${OE_LICENSE}
          python -c "import openeye; assert openeye.OEChemIsLicensed()"

      - name: Install package
        shell: bash -l {0}
        run: |
          python -m pip install --no-deps .

      - name: Run tests
        shell: bash -l {0}
        run: |
          pytest -v --cov=kinoml --cov-report=xml --color=yes kinoml/tests/

      - name: CodeCov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          yml: ./.codecov.yml

  lint-format:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.6"
          activate-environment: test
          channel-priority: true
          environment-file: devtools/conda-envs/test_env.yaml
          auto-activate-base: false

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Environment Information
        shell: bash -l {0}
        run: |
          conda info --all
          conda list

      - name: Install linter / formatter
        shell: bash -l {0}
        run: |
          conda install pylint black

      - name: Patch openforcefield
        shell: bash -l {0}
        run: |
          # We need this until openforcefield 0.9 is merged
          conda remove --force openforcefield
          pip install -U https://github.com/openforcefield/openforcefield/archive/76571d2fccba227a80cb5477669d96d38f1ad6af.zip --no-deps

      - name: Install package
        shell: bash -l {0}
        run: |
          python -m pip install --no-deps .

      - name: Run pylint
        shell: bash -l {0}
        run: |
          pylint kinoml/

      - name: Run black check
        shell: bash -l {0}
        if: always()
        run: |
          black --check -l 99 kinoml/ --exclude kinoml/_version.py

  mkdocs:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.6"
          activate-environment: test
          channel-priority: true
          environment-file: devtools/conda-envs/test_env.yaml
          auto-activate-base: false

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      - name: Environment Information
        shell: bash -l {0}
        run: |
          conda info --all
          conda list

      - name: Patch openforcefield
        shell: bash -l {0}
        run: |
          # We need this until openforcefield 0.9 is merged
          conda remove --force openforcefield
          pip install -U https://github.com/openforcefield/openforcefield/archive/76571d2fccba227a80cb5477669d96d38f1ad6af.zip --no-deps

      - name: Install package
        shell: bash -l {0}
        run: |
          python -m pip install --no-deps .

      - name: Build docs
        shell: bash
        run: |
          # Required to load docstrings sample module inside docs/
          export PYTHONPATH=$(pwd)
          mkdocs build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
        # We want to test docs building in PR, but we we
        # will only deploy if we are on / have merged to master
        # Whitelist api for PR #8
        if: github.ref == 'master' || github.head_ref == 'api'
